round(0)
round(1)
round(.5)
round(.51)
type(round(1))
class
type
build_tree(5,5,0)
build_tree(5,5,0)
Int
Int(1.0)
make_leaf([1,0,0])
c = make_leaf([1,0,0])
c[:class]
c[:a]
c.get(:a)
c.haskey(:a)
haskey(c, :a)
getI(c, :a)
get(c, :a)
get(c, :a, false)
nrow
numrow
size(randn(5,5))
size(randn(5,5))[2]
size(randn(4,5))[2]
randn(5,5)[,3]
randn(5,5)[:,3]
?sort
randn(5,5)[,1]
randn(5,5)[:,1]
randn(5,5)[:,2:end]
r = randn(5,5)
r[:,1]
r[:,2:end]
[1,2,3]
[1 2 3 ; 1 2 3]
r
r[, end]
r[:, end]
length
dim
dim(randn(5,5))
dims(randn(5,5))
getindex([1,2,3,4,5], [0,1])
getindex([1,2,3],[2,3])
?getindex
generate_distributions(100)
generate_distributions(100)
generate_distributions(100)
g = generate_distributions(10)
g
tuples_to_data(g)
tuples_to_data(generate_distributions(15))
data
build_tree(data, 4)
build_tree(data, 4)
build_tree(data, 4)
data
data[:X]
size(data[:X])
size(data[:X])[2]
data = tuples_to_data(generate_distributions(50, 10))
data:X
data[:X]
build_tree(data, 4)
data
build_tree(50, 3)
build_tree(50, 3)
build_tree(50, 3)
build_tree(50, 3)
build_tree(50, 3)
str
string
string(1)
"foo" + "bar"
build_tree(50, 3)
data
find_next_split(data)
make_fns(data)
build_tree(50, 3)
build_tree(50, 3)
build_tree(50, 3)
find_next_split(data)
fn, left, right = find_next_split(data)
fn
left
right
find_next_split(left)
find_next_split(right)
find_next_split(right)[1]()
find_next_split(right)[1]([1,2,3])
build_tree(50, 3)
build_tree(50, 3)
find_next_split(right)
find_next_split(data)
build_tree(50, 3)
build_tree(data, 3)
build_tree(data, 3)
tree = build_tree(data, 3)
data[:X]
classifier(randn(10), tree)
classifier(randn(10), tree)
classifier(randn(10), tree)
classifier(randn(10), tree)
classifier(randn(10), tree)
classifier(randn(10), tree)
classifier(randn(10), tree)
tree = build_tree(data, 5)
tree = build_tree(data, 3)
data
tree = build_tree(data, 2)
tree = build_tree(data, 3)
tree = build_tree(data, 3)
tree = build_tree(data, 6)
tree = build_tree(data, 10)
tree = build_tree(data, 6)
tree = build_tree(data, 6)
data
data[:X]
tree = build_tree(data, 6)
data[:X]
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
tree = build_tree(data, 3)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
classifier(randn(40), tree)
make_ones(10, 3)
classifier(randn(40), tree)
classifier(randn(40), tree)
make_ones(10, 3)
make_ones(10, 3)
generate_distributions(100, 2)
generate_distributions(100, 2)
generate_distributions(100, 2)
generate_distributions(100, 2)
make_ones(100, 2)
generate_distributions(100, 2)
generate_distributions(100, 2)
generate_distributions(100, 2)
generate_distributions(100, 2)
generate_distributions(100, 2)
make_ones(100, 3)
X = make_ones(100, 3)
size(X)
size(X)[1]
generate_distributions(100, 2)
generate_distributions(10, 15)
tuples_to_data(generate_distributions(10, 15))
data = tuples_to_data(generate_distributions(100, 15))
build_tree(data, 4)
make_ones
make_ones(10)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 10, 3, 4, 25)
test_this_shit(100, 3, 3, 4, 25)
test_this_shit(100, 3, 3, 4, 25)
test_this_shit(100, 3, 3, 4, 25)
test_this_shit(100, 3, 3, 4, 25)
test_this_shit(100, 3, 3, 4, 25)
test_this_shit(100, 3, 3, 4, 25)
test_this_shit(100, 3, 3, 4, 25)
test_this_shit(1000, 3, 3, 4, 25)
test_this_shit(1000, 3, 3, 4, 25)
test_this_shit(1000, 3, 3, 4, 25)
test_this_shit(1000, 3, 3, 4, 25)
test_this_shit(1000,20, 3, 4, 25)
test_this_shit(1000,20, 3, 4, 25)
test_this_shit(1000,20, 3, 4, 25)
test_this_shit(1000,20, 3, 4, 25)
test_this_shit(1000,20, 3, 20, 25)
test_this_shit(1000,20, 2, 20, 25)
test_this_shit(1000,20, 2, 20, 25)
test_this_shit(1000,20, 2, 20, 25)
test_this_shit(1000,20, 5, 20, 25)
test_this_shit(1000,20, 5, 50, 50)
test_this_shit(1000,20, 2, 50, 50)
test_this_shit(1000,20, 2, 50, 50)
generate_distributions(100,2)
test_this_shit(1000,20, 2, 50)
test_this_shit(1000,20, 2, 50)
test_this_shit(1000,20, 2, 50)
test_this_shit(1000,20, 2, 50)
test_this_shit(1000,20, 2, 50)
test_this_shit(1000,2, 2, 50)
test_this_shit(1000,2, 2, 50)
test_this_shit(1000,2, 2, 50)
test_this_shit(1000,2, 2, 50)
test_this_shit(1000,2, 2, 50)
bag
?rand
rand(1:100)
rand(1:100)
rand(1:100)
test_this_shit(1000,2, 2, 50)
test_this_shit(1000,2, 2, 50)
test_this_shit(1000,50, 2, 50)
test_this_shit(100,10, 8, 50)
test_this_shit(100,10, 8, 50)
test_this_shit(100,10, 8, 50)
test_this_shit(100,10, 8, 50)
test_this_shit(100,10, 8, 50)
test_this_shit(100,10, 8, 50)
test_this_shit(100,10, 8, 50)
test_this_shit(200,10, 8, 100)
test_this_shit(200,10, 8, 100)
test_this_shit(200,2, 8, 100)
test_this_shit(200,2, 8, 100)
test_this_shit(200,2, 2, 100)
test_this_shit(200,2, 2, 100)
test_this_shit(200,2, 2, 100)
test_this_shit(200,2, 2, 100)
test_this_shit(200,10, 2, 100)
test_this_shit(200,10, 2, 100)
test_this_shit(200,10, 2, 100)
test_this_shit(200,10, 2, 100)
test_this_shit(200,10, 2, 100)
test_this_shit(200,10, 2, 100)
test_this_shit(200,10, 10, 100)
test_this_shit(200,10, 10, 100)
test_this_shit(200,10, 10, 100)
test_this_shit(200,10, 10, 100)
test_this_shit(200,10, 10, 100)
test_this_shit(200,10, 10, 100)
test_this_shit(200,10, 10, 100)
test_this_shit(200,10, 10, 100)
runner(200,10, 10, 100, 10)
runner(200, 2, 10, 100, 10)
runner(200, 2, 10, 100, 20)
runner(200, 3, 10, 100, 20)
runner(200, 4, 10, 100, 20)
runner(200, 6, 10, 100, 20)
runner(200, 1, 10, 100, 20)
runner(200, 1, 10, 100, 20)
runner(200, 4, 2, 100, 20)
runner(200, 10, 2, 100, 20)
runner(200, 10, 3, 100, 20)
runner(200, 10, 4, 100, 20)
runner(200, 10, 10, 100, 20)
plot_standard(100, 20, 10)
plot_standard(100, 20, 10)
plot_standard(100, 20, 10)
plot_standard(100, 20, 10)
plot_standard(100, 20, 10)
plot_standard(100, 20, 10)
plot_standard(100, 20, 10)
string
getindex([1,2,3,4], [2,2,2])
bag(generate_distributions(10,3), 3)
bag(generate_distributions(10,3), 3)[1]
bag(generate_distributions(10,3), 3)[1][:X]
bag(generate_distributions(10,3), 3)[2][:X]
bag(generate_distributions(10,3), 3)[3][:X]
bagged_trees(generate_distributions(10,3), 3)[3][:X]
bagged_trees(generate_distributions(10,3), 3)[3][:X]
bagged_trees(generate_distributions(10,3), 3)[3][:X]
bagged_trees(generate_distributions(10,3), 3)[3][:X]
bagged_trees(generate_distributions(10,3), 3, 3)[3][:X]
bagged_trees(generate_distributions(10,3), 3, 3)[3][:X]
bagged_trees(generate_distributions(10,3), 3, 3)
set_default_plot_size(9inch, 7inch)
plot_standard(200, 50, 50)
randn(5,5)
randn(5,5)[, [2,3]]
randn(5,5)[:, [2,3]]
randn(5,5)[:, [2,2]]
rand(1:5, 2)
rand(1:5, 2)
rand(1:5, 2)
rand(1:5, 2)
rand(1:5, 2)
rand(1:5, 2)
rand(1:5, 2)
rand(1:5, 2)
data
data[:X]
data[:X][:, rand(1:5, 2)]
runner(200, 6, 10, 100, 20)
runner(200, 6, 10, 100, 20)
runner(200, 6, 10, 100, 20)
o
runner(200, 3, 5, 100, 5)
runner(200, 3, 5, 100, 5)
runner(200, 3, 5, 100, 5)
runner(200, 4, 5, 100, 5)
runner(200, 4, 5, 100, 10)
runner(200, 4, 5, 100, 10)
runner(200, 4, 5, 100, 2)
runner(20, 4, 5, 100, 2)
runner(200, 4, 5, 100, 2)
runner(200, 4, 2, 30, 2)
test_bagged(100, 3, 2, 20, 10)
test_bagged(100, 3, 2, 20, 10)
test_bagged(100, 3, 2, 20, 10)
test_bagged(100, 3, 2, 20, 10)
test_bagged(100, 3, 2, 20, 10)
test_bagged(100, 3, 2, 20, 10)
test_bagged(100, 3, 2, 20, 10)
test_bagged(100, 3, 2, 20, 10)
test_bagged(100, 3, 2, 20, 10)
test_bagged(100, 3, 2, 20, 10)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 20)
test_bagged(100, 3, 2, 20, 30)
test_bagged(100, 5, 2, 20, 30)
test_bagged(100, 5, 2, 20, 30)
test_bagged(100, 5, 2, 20, 30)
test_bagged(100, 5, 2, 20, 30)
test_quorum(100, 5, 2, 20, 30, make_bagged_classifiers)
test_quorum(100, 5, 2, 20, 30, make_bagged_classifiers)
test_quorum(100, 5, 2, 20, 30, make_bagged_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classfier)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classfiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 5, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 3, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 3, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 3, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 30, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 30, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 30, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 30, 2, 20, 30, make_subsampling_classifiers)
test_quorum(100, 30, 2, 20, 30, make_subsampling_classifiers)
runner(200, 3, 5, 100, 5, test_basic_tree)
runner(200, 3, 5, 100, 5, test_basic_tree)
test_quorum(100, 30, 2, 20, 30, make_basic_tree)
test_quorum(100, 30, 2, 20, 30, make_basic_classifier)
test_quorum(100, 30, 2, 20, 30, make_basic_classifier)
test_quorum(100, 30, 2, 20, 30, make_basic_classifier)
test_quorum(100, 30, 2, 20, 30, make_basic_classifier)
test_quorum(100, 30, 2, 20, 30, make_basic_classifier)
test_quorum(100, 30, 2, 20, 30, make_basic_classifier)
test_quorum(100, 3, 2, 20, 30, make_basic_classifier)
test_quorum(100, 3, 2, 20, 30, make_basic_classifier)
test_classifiers(100, 3, 2, 20, 30, make_basic_classifier)
test_classifiers(100, 3, 2, 20, 30, make_basic_classifier)
runner(200, 3, 5, 100, 1, test_basic_tree, 5)
runner(200, 3, 5, 100, 1, make_basic_classifier, 5)
runner(200, 3, 5, 100, 1, make_basic_classifier, 5)
runner(200, 3, 5, 30, 1, make_basic_classifier, 10)
runner(200, 3, 2, 30, 10, make_bagged_classifiers, 10)
runner(200, 3, 2, 30, 10, make_bagged_classifiers, 10)
runner(200, 3, 2, 30, 10, make_subsampling_classifiers, 10)
runner(200, 3, 2, 30, 10, make_subsampling_classifiers, 10)
runner(200, 3, 2, 30, 10, make_subsampling_classifiers, 10)
runner(200, 10, 2, 30, 10, make_subsampling_classifiers, 10)
runner(200, 10, 2, 30, 10, make_subsampling_classifiers, 10)
runner(200, 10, 2, 30, 10, make_subsampling_classifiers, 10)
plot_standard(200, 50, 10)
plot_standard(50, 10, 2)
plot_bagged(50, 10, 2)
plot_bagged(50, 10, 2)
plot_bagged(50, 10, 2)
plot_subsampling(50, 10, 2)
plot_subsampling(50, 10, 2)
plot_standard(100, 20, 6)
plot_standard(20, 50, 10)
plot_standard(20, 50, 2)
using Weave
weave("problemset.jnw", doctype="tex")
weave("problemset.jnw", doctype="tex")
weave("problemset.jnw", doctype="tex")
weave("problemset.jnw", doctype="tex")
weave("problemset.jnw", doctype="tex")
weave("problemset.jnw", doctype="tex")
weave("problemset.jnw", doctype="tex")
weave("problemset.jnw", doctype="tex")
plot_projections([3,7])
plot_projections([3,7])
plot
plot_projections([3,7])
