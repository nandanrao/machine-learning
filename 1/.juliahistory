weave("problemset.jmd", doctype="pandoc", out_path=:pwd)
weave("problemset.jmd", doctype="pandoc2html", out_path=:pwd)
weave("problemset.jmd", out_path=:pwd)
compare_plots(100)
compare_plots(100)
compare_plots(100)
plot(x = rand(5), y = rand(5))
compare_plots(100)
set_default_plot_size(9inch, 7inch)
compare_plots(100)
set_default_plot_size(9inch, 11inch)
compare_plots(100)
set_default_plot_size(11inch, 7inch)
compare_plots(100)
?hcat
c1 = compare_plots(10)
c2 = compare_plots(20)
hcat(c1,c2)
vcat(c1,c2)
vcat([c1,c2])
compare_all_plots()
using Weave
weave("problemset.jmd", doctype="pandoc2pdf", out_path=:pwd)
weave("problemset.jmd", doctype="pandoc2pdf", out_path=:pwd)
weave("problemset.jmd", doctype="pandoc2html", out_path=:pwd)
compare_means(Cauchy(), 100, 100, 7)
compare_means(Cauchy(), 10, 1000, 7)
compare_means(Cauchy(), 20, 1000, 7)
compare_means(Cauchy(2), 20, 1000, 7)
compare_means(Cauchy(2), 100, 1000, 7)
compare_means(Cauchy(2), 100, 1000, 7)
compare_means(Cauchy(4), 100, 1000, 7)
?Cauchy
compare_means(Cauchy(0, 2), 100, 1000, 7)
compare_means(Cauchy(0, 2), 10, 1000, 7)
compare_means(Cauchy(0, 2), 10, 1000, 7)
compare_means(Cauchy(0, 10), 10, 1000, 7)
compare_means(Cauchy(0, 10), 10, 1000, 7)
compare_means(Cauchy(0, 5), 10, 1000, 7)
repeat([1], inner = (100,100))
2^3
1,1,1  1,1,-1  1,-1,1  -1,1,1  -1,-1,1  -1,-1,-1  1,-1,-1  -1,1,-1
binomial
?binomial
binomial(5,2)
binomial(2, 8)
binomial(8, 2)
binomial(13, 2)
combination
combinations
?combinations
combinations(1,2)
combinations(4)
Base
Base.combinations
Base.combinations(1,2)
permuations
permutations
?permutations
permutations([1,1,-1])
exponentiate
??
>>
?>>
Int8(14)
bits(Int8(14))
>>bits(Int8(14))
>>(8, 1)
>>(8, 2)
>>(8, 3)
Int8(-14)
Int8(-14) >> 2
?fld
shift
[1 2 4]
[1 2 4][-1]
head([1 2 4])
head([1; 2; 4])
?Vector
head(1:10)
?head
?product
collect
product
using Iterators
product
collect(product([1,-1],[-1,1], [-1,1]))
repeat([-1,1], outer=1)
repeat([-1,1], outer=2)
repeat([[-1,1]], outer=1)
repeat([[-1,1]], outer=2)
collect(product(repeat([[-1,1]], outer=2)))
?product
product
product([1,-1,1,-1])
collect(product([1,-1,1,-1]))
collect(product(repeat([[-1,1]], outer=2)...))
collect(product(repeat([[-1,1]], outer=3)...))
collect(product(repeat([[-1,1]], outer=4)...))
product(repeat([[-1,1]], outer=3)...)
?collect
DataFrame(collect(product(repeat([[-1,1]], outer=4)...)))
? reinterpret
c = collect(product(repeat([[-1,1]], outer=4)...))
reinterpret
reinterpret(Int, c, (16, 3))
reinterpret(Int, c, (4, 16))
reinterpret(Int, c, (16,4))
boxes(3)
boxes(4)
project(10)
project(10)
project(4, boxes(4), 4)
project(4, boxes(4))
project(5, boxes(5))
plot(DataFrame(project(5, boxes(5))), x="x1", y="y1")
DataFrame(project(5, boxes(5)))
DataFrame(project(5, boxes(5))')
plot(DataFrame(project(5, boxes(5))'), x="x1", y="y1")
plot(DataFrame(project(5, boxes(5))'), x="x1", y="x2")
boxes(4)
DataFrame(project(8, boxes(8))')
plot(DataFrame(project(7, boxes(7))'), x="x1", y="x2")
plot(DataFrame(project(10, boxes(10))'), x="x1", y="x2")
plot_boxes(4)
plot_boxes(4)
plot_boxes(5)
plot_boxes(6)
plot_boxes(6)
plot_boxes(6)
plot_boxes(6)
partition
?partition
product
product([1,1])
plot_boxes(2)
plot_boxes(2)
plot_boxes(2)
project_boxes(2)
project_boxes(3)
collect(1:10)
1:10
?stack
widedf = DataFrame(x = collect(1:10), var1 = collect(1:10), var2 = collect(1:10).^2)
longdf = stack(widedf, [:var1, :var2])
widedf = DataFrame(x = collect(1:10), var1 = collect(1:10), var2 = collect(1:12).^2)
?stack
stack(DataFrame(project_boxes(5)))
DataFrame(project_boxes(5))
project_boxes(3)
project_boxes(3)
stack(DataFrame(project_boxes(5)))
DataFrame(project_boxes(5))
DataFrame([ project_boxes(2); project_boxes(4)])
DataFrame([ project_boxes(2); project_boxes(4)])
using DataFrames, RDatasets
iris = dataset("datasets", "iris")
Pkg.add("RDatasets")
make_df_from_calls(project_boxes, [2,3])
make_df_from_calls(project_boxes, [2,3])
make_df_from_calls(project_boxes, [2,3])
plot_boxes(2)
project_boxes(2)
project_boxes(3)
project_boxes(3)
make_df_from_calls(project_boxes, [2,3])
?DataFrame
DataFrame(ncols = 3)
make_df_from_calls(project_boxes, [2,3])
make_df_from_calls(project_boxes, [2])
make_df_from_calls(project_boxes, [2])
DataFrame(ncols=3)
[DataFrame(ncols=3) ; DataFrame(ncols=3)]
[DataFrame(ncols=3) ; [1 2 3]]
project_boxes(2)
[ 1 2; 3 4]
[1 2 3 ; 3 4 4]
DataFrame([1 2 3 ; 3 4 4])
[DataFrame([1 2 3 ; 3 4 4]); DataFrame()]
[DataFrame([1 2 3 ; 3 4 4]); DataFrame(ncols=3)]
[DataFrame([1 2 3 ; 3 4 4]); DataFrame()]
make_df_from_calls(project_boxes, [2])
?Array
Array(1,3)
Array{Any}(1,3)
Array{Float64}(1,3)
Array{Any}(0,3)
make_df_from_calls(project_boxes, [2])
make_df_from_calls(project_boxes, [2,3])
Array(0,3)
make_df_from_calls(project_boxes, [2, 5, 10])
make_df_from_calls(project_boxes, [2, 5, 10])
?DataFrame
make_df_from_calls(project_boxes, [2, 5, 10])
project_boxes(2)
squeeze(project_boxes(2))
squeeze(project_boxes(2), 1)
squeeze(project_boxes(2), 2)
squeeze(project_boxes(2), 1)
reshape(project_boxes(2), 1)
reshape(project_boxes(2), 1, 8)
reshape(project_boxes(2), 2, 8)
reshape(project_boxes(2), 2, 4)
reshape(project_boxes(2), 4, 2)
boxes(4)
fill([], 5)
fill(5)
fill(5, 1)
fill(5, 5)
make_df_from_calls(project_boxes, [2, 5, 10])
compare_all_plots()
boxes(4)
project_boxes(4)
[(a,b) for a,b in project_boxes(4)]
[(a,b) for (a,b) in project_boxes(4)]
[(a,b) for (a,b) in project_boxes(4)]
project_boxes)4
project_boxes(4)
map(prin, project_boxes(4))
map(print, project_boxes(4))
map(n -> print(n + "\n"), project_boxes(4))
"hey" + "\n"
map(n -> print("$n\n"), project_boxes(4))
project_boxes(4)[1,:]
[a for a in project_boxes(4)[, :]]
p = project_boxes(4)
p
p[:,]
p[,:]
p[1,:]
p
length(p)
size(p)
size(p)[1]
size(p)[2]
nrow
nrow(p)
nrows(p)
p
DataFrame(p)
?DataFrame
Names(DataFrame(p), [:x1, :x5])
names(DataFrame(p), [:x1, :x5])
names!(DataFrame(p), [:x1, :x5])
d = DataFrame(p)
names!(s, [:x1, :x5])
names!(d, [:x1, :x5])
d
class
type
type(d)
Type
make_df_from_calls(project_boxes, [2,4,6,10])
plot_projections()
set_default_plot_size(12cm, 8cm)

set_default_plot_size(11inch, 7inch)
plot_projections()
plot_projections()
plot_projections()
plot_projections()
plot_projections()
plot_projections([2,4])
plot_projections([6,8])
compare_all_plots()
compare_all_plots()
compare_plots()
compare_plots(10)
nums = [10,100,1000]
vcat([compare_plots(n) for n in nums])
compare_plots()
compare_all_plots()
compare_all_plots()
compare_plots()
vcat([compare_plots(n) for n in nums])
vcat([compare_plots(n) for n in nums])[1:100]
vcat([compare_plots(n) for n in nums])[:, 1:100]
vcat([compare_plots(n) for n in nums])[:, 100]
vcat([compare_plots(n) for n in nums])[100, :]
vcat([compare_plots(n) for n in nums])[120, :]
vcat([compare_plots(n) for n in nums])[100:120, :]
vcat([compare_plots(n) for n in nums])[100:3000, :]
vcat([compare_plots(n) for n in nums])[100:300, :]
compare_plots(10)
[compare_plots(10); compare_plots(5)]
[compare_plots(10), compare_plots(5)]
vcat([compare_plots(10), compare_plots(5)])
compare_all_plots()
vcat([compare_plots(n) for n in [2, 5]])
[compare_plots(n) for n in [2, 5]]
reduce(p,n -> [p, compare_plots(n)], DataFrame(), [2,4])
reduce((p,n) -> [p, compare_plots(n)], DataFrame(), [2,4])
reduce((p,n) -> [p; compare_plots(n)], DataFrame(), [2,4])
[compare_plots(n) for n in [2, 5]]
[compare_plots(n) for n in [2, 5]]
compare_plots(2)
compare_plots
[compare_plots(n) for n in [2, 5]]
[compare_plots(n) for n in [2, 5]]
compare_plots(5)
compare_plots()
compare_plots
compare_plots(3)
[compare_plots(n) for n in [2, 5]]
compare_all_plots()
set_default_plot_size(11inch, 7inch)
compare_all_plots()
compare_all_plots([10, 200])
compare_all_plots([10, 500])
compare_all_plots([20, 500])
compare_all_plots()
plot_projections([2,4])
[2,4]
plot_projections()
plot_projections([2,4])
plot_projections([2,4.5])
plot_projections([2,4])
plot_projections([2,7])
weave("problemset.jmd", "pandoc2pdf", out_path=:pwd)
using Weave
weave("problemset.jmd", "pandoc2pdf", out_path=:pwd)
weave("problemset.jmd", "pandoc2pdf", out_dir=:pwd)
weave("problemset.jmd", "pandoc2pdf")
weave("problemset.jmd", doc_type = "pandoc2pdf")
weave("problemset.jmd", doctype = "pandoc2pdf")
weave("problemset.jmd", doctype = "pandoc2pdf")
weave("problemset.jmd", doctype = "pandoc2pdf")
weave("problemset.jmd", doctype = "pandoc2pdf")
compare_means(Cauchy(), 100, 1000, 7)
compare_means(Cauchy(), 100, 1000, 7)
compare_means(Cauchy(), 100, 1000, 6)
compare_means
compare_means(Cauchy(), 10, 10, 7)
plot()
plot(compare_means(Cauchy(), 10, 10, 7))
compare_means(Cauchy(), 10, 100, 7)
compare_means(Cauchy(), 20, 1000, 7)
compare_means(Cauchy(), 15, 1000, 7)
compare_means(TDist(2), 15, 1000, 7)
compare_means(TDist(2), 10, 1000, 7)
compare_means(TDist(2), 10, 100, 7)
compare_means(TDist(2), 10, 2000, 7)
compare_means(TDist(2), 10, 2000, 3)
compare_means(TDist(2), 10, 2000, 2)
compare_means(TDist(2), 5, 2000, 3)
compare_means(TDist(1.5), 7, 2000, 3)
compare_means(TDist(1.5), 15, 2000, 4)
generate_means_and_moms(TDist(3), 45, 1000, 5)
[i for (i, _) in generate_means_and_moms(TDist(3), 45, 1000, 5)][1:10]
[i for (i, _) in generate_means_and_moms(TDist(3), 45, 1000, 5)]
maximum([i for (i, _) in generate_means_and_moms(TDist(3), 45, 1000, 5)])
g
g = generate_means_and_moms(TDist(3), 45, 1000, 5)
g
maximum(g)
abs(generate_means_and_moms(TDist(3), 45, 1000, 5))
abs((1,-1))
abs(-1)
map(abs, (1,-1))
a = [map(abs, a) for a in g]
maximum(a)
worst_case(Cauchy(), 45, 1000, 5)
worst_case(TDist(3), 45, 1000, 5)
worst_case(TDist(3), 45, 1000, 5)
worst_case(TDist(3), 45, 1000, 5)
worst_case(TDist(3), 45, 1000, 5)
worst_case(TDist(3), 45, 1000, 5)
worst_case(TDist(3), 45, 1000, 5)
worst_case(TDist(3), 45, 1000, 5)
worst_case(TDist(3), 45, 1000, 5)
worst_case(TDist(3), 45, 10000, 5)
worst_case(TDist(3), 45, 10000, 5)
worst_case(TDist(3), 45, 10000, 5)
worst_case(TDist(3), 45, 100000, 5)
worst_case(TDist(3), 45, 100000, 5)
worst_case(TDist(3), 45, 100000, 5)
worst_case(TDist(3), 45, 100000, 5)
worst_case(TDist(3), 45, 100000, 5)
worst_case(TDist(3), 30, 100000, 5)
worst_case(TDist(3), 30, 100000, 5)
worst_case(TDist(3), 30, 100000, 5)
worst_case(TDist(3), 30, 100000, 5)
worst_case(TDist(3), 300, 100000, 5)
worst_case(TDist(3), 30, 10000, 5)
worst_case(TDist(3), 300, 10000, 5)
worst_case(TDist(3), 3000, 10000, 5)
[worst_case(Cauchy(), N, 1000, 5) for N in 10:10:200]
cases = [worst_case(Cauchy(), N, 1000, 5) for N in 10:10:500]
cases = [worst_case(TDist(2), N, 1000, 5) for N in 10:10:500]
cases = [worst_case(TDist(3), N, 1000, 5) for N in 10:10:500]
cases = [worst_case(TDist(2), N, 10000, 5) for N in 10:10:500]
cases = [worst_case(TDist(3), N, 1000, 5) for N in 10:10:500]
plot(cases)
cases[1]
cases[1, :]
cases[:,1]
?reshape
cases = [worst_case(TDist(3), N, 1000, 5) for N in 10:10:500]
cases = [worst_case(TDist(3), N, 1000, 5) for N in 10:10:500]
plot_worst_cases(TDist(3), 1000, 5, 10:10:300)
plot_worst_cases(TDist(3), 1000, 5, 10:10:300)
plot_worst_cases(TDist(3), 1000, 5, 10:10:300)
plot_worst_cases(TDist(3), 10000, 5, 10:10:1000)
plot_worst_cases(TDist(3), 1000, 5, 10:10:100)
plot_worst_cases(TDist(3), 100, 5, 10:10:100)
plot_worst_cases(TDist(3), 100, 5, 10:10:100)
plot_worst_cases(TDist(3), 100, 5, 10:10:100)
plot_worst_cases(TDist(3), 100, 5, 10:10:100)
using Weave
weave("problemset.jmd", doctype="pandoc2pdf")
weave("problemset.jmd", doctype="pandoc2pdf")
weave("problemset.jmd", doctype="pandoc2pdf")
weave("problemset.jmd", doctype="pandoc2pdf")
weave("problemset.jmd", doctype="pandoc2pdf")
compare_means(generate_means(TDist(2), 50, 100000, 5))
compare_means(generate_means(TDist(2), 50, 100000, 5))
compare_means(generate_means(TDist(2), 50, 100000, 5))
compare_means(generate_means(TDist(2), 50, 10000, 5))
?color
?colorant
compare_means(generate_means(TDist(2), 50, 10000, 5))
colorant"red"
colorant"rgba(255,255,255,0.5)"
colorant"rgba(255,255,255,.5)"
compare_means(generate_means(TDist(2), 50, 10000, 5))
compare_means(generate_means(TDist(2), 50, 10000, 5))
compare_means(generate_means(TDist(3), 50, 100000, 5))
compare_means(generate_means(TDist(3), 50, 100000, 5))
compare_means(generate_means(TDist(3), 50, 100000, 5))
compare_means(generate_means(TDist(3), 50, 100000, 5))
compare_means(generate_means(TDist(1), 50, 100000, 5))
compare_means(generate_means(TDist(1), 50, 100000, 5))
compare_means(generate_means(TDist(1), 50, 100000, 5))
compare_means(generate_means(TDist(2), 50, 100000, 5))
g = generate_means(TDist(2), 50, 100000, 5)
DataFrame(g)
g = generate_means(TDist(2), 50, 100000, 5)
compare_means(generate_means(TDist(2), 50, 100000, 5))
compare_means(generate_means(TDist(2), 50, 100000, 5))
compare_means(generate_means(TDist(2), 30, 100000, 5))
g
g[g > 0.25]
[g for (i,j) in g if i > 0.25]
g
compare_means(generate_means(TDist(2), 30, 100000, 5))
g = generate_means(TDist(2), 30, 1000, 5)
g
?filter
filter((a,b) -> a > 0.2, g)
filter(t -> t[1] > 0.2, g)
filter(t -> t[1] > 0.2 && t[2] > 0.2, g)
?all
filter(t -> all(x -> x > .2, t) > 0.2, g)
filter(t -> all(x->(x>.2), t) > 0.2, g)
filter(t -> all(x->(x>.2), t), g)
compare_tails(generate_means(TDist(2), 30, 10000, 5))
filter(t -> all(x->(x>.2), t), g)
compare_tails(generate_means(TDist(2), 30, 10000, 5))
filter(t -> all(x->(x>.2), t), g)
filter(t -> all(x->(x>1), t), g)
filter(t -> all(x->(x>1), t), g)
compare_tails(generate_means(TDist(2), 30, 10000, 5))
g
compare_tails(g)
compare_tails(g)
compare_tails(g)
compare_tails(generate_means(TDist(2), 30, 10000, 5))
compare_tails(generate_means(TDist(2), 30, 10000, 5))
compare_tails(generate_means(TDist(2), 30, 10000, 5), .5)
compare_tails(generate_means(TDist(2), 30, 10000, 5), .5)
compare_tails(generate_means(TDist(2), 30, 10000, 5), .5)
compare_tails(generate_means(TDist(1), 30, 10000, 5), .5)
compare_tails(generate_means(TDist(1.5), 30, 10000, 5), .5)
compare_tails(generate_means(TDist(3), 30, 10000, 5), .5)
compare_tails(generate_means(TDist(3), 30, 100000, 5), .5)
compare_tails(generate_means(TDist(2), 30, 100000, 5), .5)
compare_tails(generate_means(TDist(2), 30, 100000, 5), .5)
compare_tails(generate_means(TDist(2), 30, 100000, 5), .5)
compare_tails(generate_means(TDist(3), 30, 100000, 5), .5)
weave("problemset.jmd", doctype="pandoc2pdf")
using Weave
weave("problemset.jmd", doctype="pandoc2pdf")
weave("problemset.jmd", doctype="pandoc2pdf")
weave("problemset.jmd", doctype="pandoc2pdf")
weave("problemset.jmd", doctype="pandoc2pdf")
compare_means(generate_means(Cauchy(), 50, 100000, 5))
compare_means(generate_means(Cauchy(), 50, 100000, 5))
weave("problemset.jmd", doctype="pandoc2pdf")
generate_means(Cauchy(), 10, 100, 5)
generate_means(Cauchy(), 10, 100, 5)
using Weave
weave("problemset.jmd", doctype="pandoc2pdf")
generate_means(Cauchy(), 10, 100, 5)
generate_means(Cauchy(), 50, 100000, 5)
compare_means(generate_means(Cauchy(), 50, 100000, 5))
g = generate_means(Cauchy(), 10, 100, 5)
weave("problemset.jmd", doctype="pandoc2pdf")
using Weave
weave("problemset.jmd", doctype="pandoc2pdf")
compare_means(generate_means(Cauchy(), 50, 100000, 5))
